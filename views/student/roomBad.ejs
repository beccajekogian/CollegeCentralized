<%- include('../partials/header', {title:"video chat", permission: permission}) -%>

<body>
  <div class="header">
    <div class="logo">
      <h3>Video Chat</h3>
    </div>
  </div>
  <div class="main">
    <div class="main__left">
      <div class="videos__group">
        <div id="video-grid"></div>
      </div>
      <div class="options">
        <div class="options__left">
          <div class="options__button">
            <i class="fa fa-video-camera" aria-hidden="true"></i>
          </div>
        <div class="options__button">
            <i class="fa fa-microphone" aria-hidden="true"></i>
        </div>
       </div>
       <div class="options__right">
         <div class="options__button background__red">
           <i class="fa fa-phone" aria-hidden="true"></i>
         </div>
       </div>
     </div>
    </div>
    <div class="main__right">
      <div class="main__chat_window">
        <ul class="messages"></ul>
     </div>
     <div class="main__message_container">
       <input id="chat_message" type="text" placeholder="Type message here...">
       <div class="options__button">
         <i class="fa fa-plus" aria-hidden="true"></i>
       </div>
     </div>
    </div>
  </div>
</body>

<script>


    const videoGrid = document.getElementById(“video-grid”);
    const myVideo = document.createElement(“video”);
    myVideo.muted = true;
    var peer = new Peer(undefined, {
    path: “/peerjs”,
    host: “/”,
    port: “3000”,
    });
    let myVideoStream;
    navigator.mediaDevices
    .getUserMedia({
    audio: true,
    video: true,
    })
    .then((stream) => {
    myVideoStream = stream;
    addVideoStream(myVideo, stream);
    peer.on(“call”, (call) => {
    call.answer(stream);
    const video = document.createElement(“video”);
    call.on(“stream”, (userVideoStream) => {
    addVideoStream(video, userVideoStream);
    });
    });
    socket.on(“user-connected”, (userID) => {
    connectToNewUser(userID, stream);
    });
    });
    const connectToNewUser = (userID, stream) => {
    const call = peer.call(userID, stream);
    const video = document.createElement(“video”);
    call.on(“stream”, (userVideoStream) => {
    addVideoStream(video, userVideoStream);
    });
    };
    peer.on(“open”, (id) => {
    socket.emit(“join-room”, ROOM_ID, id);
    });
    const addVideoStream = (video, stream) => {
    video.srcObject = stream;
    video.addEventListener(“loadedmetadata”, () => {
    video.play();
    videoGrid.append(video);
    });
    };

</script>
<%- include('../partials/footer') -%>
